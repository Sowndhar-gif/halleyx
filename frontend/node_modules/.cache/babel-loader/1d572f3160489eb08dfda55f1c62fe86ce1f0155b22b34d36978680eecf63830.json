{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\surya\\\\OneDrive\\\\Documents\\\\halleyx\\\\frontend\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [customerToken, setCustomerToken] = useState(null);\n  const [adminToken, setAdminToken] = useState(null);\n  const [currentCustomer, setCurrentCustomer] = useState(null);\n  const [currentAdmin, setCurrentAdmin] = useState(null);\n  const [impersonationToken, setImpersonationToken] = useState(null);\n  const [isImpersonating, setIsImpersonating] = useState(false);\n\n  // Load tokens from localStorage on mount\n  useEffect(() => {\n    const storedCustomerToken = localStorage.getItem('customerToken');\n    const storedAdminToken = localStorage.getItem('adminToken');\n    const storedImpersonationToken = localStorage.getItem('impersonationToken');\n    if (storedCustomerToken) {\n      setCustomerToken(storedCustomerToken);\n    }\n    if (storedAdminToken) {\n      setAdminToken(storedAdminToken);\n    }\n    if (storedImpersonationToken) {\n      setImpersonationToken(storedImpersonationToken);\n      setIsImpersonating(true);\n    }\n  }, []);\n\n  // Helper to get auth headers\n  const getAuthHeaders = token => {\n    return {\n      'Content-Type': 'application/json',\n      'Authorization': 'Bearer ' + token\n    };\n  };\n\n  // Customer login\n  const loginCustomer = async (email, password) => {\n    try {\n      const response = await fetch('/api/auth/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Login failed');\n      }\n      setCustomerToken(data.token);\n      setCurrentCustomer(data.user);\n      localStorage.setItem('customerToken', data.token);\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  // Customer register\n  const registerCustomer = async (firstName, lastName, email, password) => {\n    try {\n      const response = await fetch('/api/auth/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          firstName,\n          lastName,\n          email,\n          password\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Registration failed');\n      }\n      setCustomerToken(data.token);\n      setCurrentCustomer(data.user);\n      localStorage.setItem('customerToken', data.token);\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  // Admin login\n  const loginAdmin = async (email, password) => {\n    try {\n      const response = await fetch('/api/auth/admin-login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          email,\n          password\n        })\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Admin login failed');\n      }\n      setAdminToken(data.token);\n      setCurrentAdmin(data.user);\n      localStorage.setItem('adminToken', data.token);\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  // Logout customer\n  const logoutCustomer = () => {\n    setCustomerToken(null);\n    setCurrentCustomer(null);\n    localStorage.removeItem('customerToken');\n  };\n\n  // Logout admin\n  const logoutAdmin = () => {\n    setAdminToken(null);\n    setCurrentAdmin(null);\n    localStorage.removeItem('adminToken');\n  };\n\n  // Impersonate customer\n  const impersonateCustomer = async (customerId, customerName) => {\n    try {\n      const response = await fetch(`/api/auth/impersonate/${customerId}`, {\n        method: 'POST',\n        headers: getAuthHeaders(adminToken)\n      });\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || 'Failed to impersonate customer');\n      }\n      setImpersonationToken(data.token);\n      setCurrentCustomer(data.user);\n      setIsImpersonating(true);\n      localStorage.setItem('impersonationToken', data.token);\n      return data;\n    } catch (error) {\n      throw error;\n    }\n  };\n\n  // Stop impersonation\n  const stopImpersonation = () => {\n    setImpersonationToken(null);\n    setCurrentCustomer(null);\n    setIsImpersonating(false);\n    localStorage.removeItem('impersonationToken');\n  };\n  const value = {\n    customerToken,\n    adminToken,\n    currentCustomer,\n    currentAdmin,\n    impersonationToken,\n    isImpersonating,\n    getAuthHeaders,\n    loginCustomer,\n    registerCustomer,\n    loginAdmin,\n    logoutCustomer,\n    logoutAdmin,\n    impersonateCustomer,\n    stopImpersonation\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 171,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"z4TJImTNQf3EO1TujNTJ9ZeX8YI=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","context","Error","AuthProvider","children","_s2","customerToken","setCustomerToken","adminToken","setAdminToken","currentCustomer","setCurrentCustomer","currentAdmin","setCurrentAdmin","impersonationToken","setImpersonationToken","isImpersonating","setIsImpersonating","storedCustomerToken","localStorage","getItem","storedAdminToken","storedImpersonationToken","getAuthHeaders","token","loginCustomer","email","password","response","fetch","method","headers","body","JSON","stringify","data","json","ok","message","user","setItem","error","registerCustomer","firstName","lastName","loginAdmin","logoutCustomer","removeItem","logoutAdmin","impersonateCustomer","customerId","customerName","stopImpersonation","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/surya/OneDrive/Documents/halleyx/frontend/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (!context) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [customerToken, setCustomerToken] = useState(null);\r\n  const [adminToken, setAdminToken] = useState(null);\r\n  const [currentCustomer, setCurrentCustomer] = useState(null);\r\n  const [currentAdmin, setCurrentAdmin] = useState(null);\r\n  const [impersonationToken, setImpersonationToken] = useState(null);\r\n  const [isImpersonating, setIsImpersonating] = useState(false);\r\n\r\n  // Load tokens from localStorage on mount\r\n  useEffect(() => {\r\n    const storedCustomerToken = localStorage.getItem('customerToken');\r\n    const storedAdminToken = localStorage.getItem('adminToken');\r\n    const storedImpersonationToken = localStorage.getItem('impersonationToken');\r\n\r\n    if (storedCustomerToken) {\r\n      setCustomerToken(storedCustomerToken);\r\n    }\r\n    if (storedAdminToken) {\r\n      setAdminToken(storedAdminToken);\r\n    }\r\n    if (storedImpersonationToken) {\r\n      setImpersonationToken(storedImpersonationToken);\r\n      setIsImpersonating(true);\r\n    }\r\n  }, []);\r\n\r\n  // Helper to get auth headers\r\n  const getAuthHeaders = (token) => {\r\n    return {\r\n      'Content-Type': 'application/json',\r\n      'Authorization': 'Bearer ' + token\r\n    };\r\n  };\r\n\r\n  // Customer login\r\n  const loginCustomer = async (email, password) => {\r\n    try {\r\n      const response = await fetch('/api/auth/login', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ email, password }),\r\n      });\r\n      const data = await response.json();\r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Login failed');\r\n      }\r\n      setCustomerToken(data.token);\r\n      setCurrentCustomer(data.user);\r\n      localStorage.setItem('customerToken', data.token);\r\n      return data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Customer register\r\n  const registerCustomer = async (firstName, lastName, email, password) => {\r\n    try {\r\n      const response = await fetch('/api/auth/register', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ firstName, lastName, email, password }),\r\n      });\r\n      const data = await response.json();\r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Registration failed');\r\n      }\r\n      setCustomerToken(data.token);\r\n      setCurrentCustomer(data.user);\r\n      localStorage.setItem('customerToken', data.token);\r\n      return data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Admin login\r\n  const loginAdmin = async (email, password) => {\r\n    try {\r\n      const response = await fetch('/api/auth/admin-login', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify({ email, password }),\r\n      });\r\n      const data = await response.json();\r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Admin login failed');\r\n      }\r\n      setAdminToken(data.token);\r\n      setCurrentAdmin(data.user);\r\n      localStorage.setItem('adminToken', data.token);\r\n      return data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Logout customer\r\n  const logoutCustomer = () => {\r\n    setCustomerToken(null);\r\n    setCurrentCustomer(null);\r\n    localStorage.removeItem('customerToken');\r\n  };\r\n\r\n  // Logout admin\r\n  const logoutAdmin = () => {\r\n    setAdminToken(null);\r\n    setCurrentAdmin(null);\r\n    localStorage.removeItem('adminToken');\r\n  };\r\n\r\n  // Impersonate customer\r\n  const impersonateCustomer = async (customerId, customerName) => {\r\n    try {\r\n      const response = await fetch(`/api/auth/impersonate/${customerId}`, {\r\n        method: 'POST',\r\n        headers: getAuthHeaders(adminToken)\r\n      });\r\n      const data = await response.json();\r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Failed to impersonate customer');\r\n      }\r\n      setImpersonationToken(data.token);\r\n      setCurrentCustomer(data.user);\r\n      setIsImpersonating(true);\r\n      localStorage.setItem('impersonationToken', data.token);\r\n      return data;\r\n    } catch (error) {\r\n      throw error;\r\n    }\r\n  };\r\n\r\n  // Stop impersonation\r\n  const stopImpersonation = () => {\r\n    setImpersonationToken(null);\r\n    setCurrentCustomer(null);\r\n    setIsImpersonating(false);\r\n    localStorage.removeItem('impersonationToken');\r\n  };\r\n\r\n  const value = {\r\n    customerToken,\r\n    adminToken,\r\n    currentCustomer,\r\n    currentAdmin,\r\n    impersonationToken,\r\n    isImpersonating,\r\n    getAuthHeaders,\r\n    loginCustomer,\r\n    registerCustomer,\r\n    loginAdmin,\r\n    logoutCustomer,\r\n    logoutAdmin,\r\n    impersonateCustomer,\r\n    stopImpersonation\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}